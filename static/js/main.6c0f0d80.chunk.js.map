{"version":3,"sources":["Tasks.js","List.js","App.js","serviceWorker.js","index.js"],"names":["Tasks","create","item","react_default","a","createElement","key","onClick","_this","props","del","text","listTasks","this","items","map","Component","List","onSubmit","add","placeholder","ref","inputElement","value","current","onChange","input","tyep","App","state","tasks","currentTask","e","target","Date","now","setState","preventDefault","newTask","concat","Object","toConsumableArray","filtered","filter","React","createRef","class","src_List","src_Tasks","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAiBeA,oNAdXC,OAAS,SAAAC,GACL,OACIC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,EAAKI,IAAKC,QAAS,kBAAMC,EAAKC,MAAMC,IAAIR,EAAKI,OAAMH,EAAAC,EAAAC,cAAA,WAAMH,EAAKS,gFAI3E,IACIC,EADYC,KAAKJ,MAAMK,MACDC,IAAIF,KAAKZ,QACnC,OACIE,EAAAC,EAAAC,cAAA,UAAKO,UAVGI,cCeLC,mLAbP,OACId,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMa,SAAUL,KAAKJ,MAAMU,KACvBhB,EAAAC,EAAAC,cAAA,SAAOe,YAAY,WAAWC,IAAKR,KAAKJ,MAAMa,aAAcC,MAAOV,KAAKJ,MAAMe,QAAQb,KAAMc,SAAUZ,KAAKJ,MAAMiB,QACjHvB,EAAAC,EAAAC,cAAA,UAAQsB,KAAK,UAAb,sBAPLX,aCiDJY,6MA5CbC,MAAQ,CACNC,MAAO,GACPC,YAAa,CACXpB,KAAM,GACNL,IAAK,OAIToB,MAAQ,SAAAM,GACN,IACID,EAAc,CAACpB,KADJqB,EAAEC,OAAOV,MACWjB,IAAK4B,KAAKC,OAC7C3B,EAAK4B,SAAS,CAACL,mBAGjBZ,IAAM,SAAAa,GACJA,EAAEK,iBACF,IAAIC,EAAU9B,EAAKqB,MAAME,YACzB,GAAoB,KAAjBO,EAAQ3B,KAAa,CACtB,IAAImB,EAAK,GAAAS,OAAAC,OAAAC,EAAA,EAAAD,CAAOhC,EAAKqB,MAAMC,OAAlB,CAAyBQ,IAClC9B,EAAK4B,SAAS,CAACN,MAAOA,EAAOC,YAAa,CAACpB,KAAM,GAAIL,IAAK,UAI9DI,IAAM,SAAAJ,GACJ,IAAMoC,EAAWlC,EAAKqB,MAAMC,MAAMa,OAAO,SAAAzC,GACvC,OAAOA,EAAKI,MAAQA,IAEtBE,EAAK4B,SAAS,CAACN,MAAOY,OAGxBpB,aAAesB,IAAMC,oFAGnB,OACE1C,EAAAC,EAAAC,cAAA,OAAKyC,MAAM,OACT3C,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,8CACJF,EAAAC,EAAAC,cAAC0C,EAAD,CAAM5B,IAAKN,KAAKM,IAAKG,aAAcT,KAAKS,aAAcI,MAAOb,KAAKa,MAAOF,QAASX,KAAKgB,MAAME,cAC7F5B,EAAAC,EAAAC,cAAC2C,EAAD,CAAOlC,MAAOD,KAAKgB,MAAMC,MAAOpB,IAAKG,KAAKH,cAvChCM,aCMEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6c0f0d80.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Tasks extends Component {\n    create = item => {\n        return (\n            <li key={item.key} onClick={() => this.props.del(item.key)}><div>{item.text}</div></li>\n        )\n    }\n    render() {\n        let taskEntry = this.props.items\n        let listTasks = taskEntry.map(this.create)\n        return (\n            <ul>{listTasks}</ul>\n        )\n    }\n}\n\nexport default Tasks","import React, { Component } from 'react'\n\nclass List extends Component {\n    render() {\n        return (\n            <div>\n                <div>\n                    <form onSubmit={this.props.add}>\n                        <input placeholder=\"New Task\" ref={this.props.inputElement} value={this.props.current.text} onChange={this.props.input}/>\n                        <button tyep=\"submit\">Add Task</button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default List","import React, { Component } from 'react';\nimport './App.css';\nimport Tasks from './Tasks.js'\nimport List from  './List.js'\n// import { throwStatement } from '@babel/types';\n\nclass App extends Component {\n  state = {\n    tasks: [],\n    currentTask: {\n      text: '',\n      key: ''\n    }\n  }\n\n  input = e => {\n    let taskText = e.target.value;\n    let currentTask = {text: taskText, key: Date.now()};\n    this.setState({currentTask});\n  }\n  \n  add = e => {\n    e.preventDefault();\n    let newTask = this.state.currentTask;\n    if(newTask.text !== '') {\n      let tasks = [...this.state.tasks, newTask];\n      this.setState({tasks: tasks, currentTask: {text: '', key: ''}})\n    }\n  }\n\n  del = key => {\n    const filtered = this.state.tasks.filter(item => {\n      return item.key !== key;\n    })\n    this.setState({tasks: filtered})\n  }\n\n  inputElement = React.createRef()\n\n  render() {\n    return (\n      <div class=\"App\">\n        <h1>Super Simple ToDo</h1>\n        <h4><sub>Its about as basic as it comes</sub></h4>\n        <List add={this.add} inputElement={this.inputElement} input={this.input} current={this.state.currentTask} />\n        <Tasks items={this.state.tasks} del={this.del} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}